[{"content":"GiscusÁïôË®ÄÁ≥ªÁµ±Ê∏¨Ë©¶ https://giscus.app/zh-TW\nÊ≠°ËøéÂú®‰∏ãÊñπÁïôË®ÄÔºÅü§ó\n","date":"2025-05-03T18:21:00+08:00","permalink":"https://orangeegg1937.github.io/p/giscus%E7%95%99%E8%A8%80%E7%B3%BB%E7%B5%B1%E6%B8%AC%E8%A9%A6/","title":"GiscusÁïôË®ÄÁ≥ªÁµ±Ê∏¨Ë©¶"},{"content":"UnityEvent Unity manual: https://docs.unity3d.com/Manual/UnityEvents.html\nAccording to the manual, UnityEvents are a way of allowing user driven callback to be persisted from edit time to run time without the need for additional programming and script configuration. UnityEvents may sound very unfamiliar as it cannot directly added in a gameobject. However, if you used the UGUI Button before, you will understand it soon. As the On click() selection in the button is a kind of UnityEvents.\nIf we want to use the UnityEvent, we can simply using the class UnityEvent. After that, you can see the same selection in the inspector.\nMove deeply Sometime we may want to pass some specific value to the callback function such as the enemy gameobject, however, if we look at the inspector, it dose not support to pass the gameobject, so how can we do it? Actually, we can using the generic form of the UnityEvent\u0026lt;T0\u0026gt;. Then, using .Invoke(value) to send to all listener.\nHowever, if you look at the code it may a bit complicated. So how can we assign a function into a UnityEvent without using generic? We can try to use C# delegate. Here is an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class ValueController : MonoBehaviour { private float number; private Button plus; private Button mins; public float offset = 10.0f; // initial the member private void Awake() { number = 0; plus = gameObject.transform.GetChild(0).GetComponent\u0026lt;Button\u0026gt;(); mins = gameObject.transform.GetChild(1).GetComponent\u0026lt;Button\u0026gt;(); plus.onClick.AddListener(delegate { EditVal(offset); }); mins.onClick.AddListener(delegate { EditVal(-offset); }); } private void EditVal(float val) { number += val; } } In this code, we assign the EditVal() function into the listener, when players click the plus button, the number will be increased by 10; when players click the mins button, the number will be decreased by 10. Most importantly, we havn\u0026rsquo;t create any new UnityEvent in the script.\n1 plus.onClick.AddListener(() =\u0026gt; EditVal(offset)); Or using the lambda expressions.\nThe reason why we need to use delegate/lambda expressions here because according to the Unity documentaion, the UnityAction class here (The button OnClick() ) does not take any argument.\nReference UnityEvent Class\nUnity Manual\n","date":"2023-12-03T18:21:00+08:00","permalink":"https://orangeegg1937.github.io/p/unity-note-%E5%80%8B%E4%BA%BA%E7%AD%86%E8%A8%98-unityevent-and-advance-use-of-button/","title":"Unity note ÂÄã‰∫∫Á≠ÜË®ò (UnityEvent and advance use of button)"}]